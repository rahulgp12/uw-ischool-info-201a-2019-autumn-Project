# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list(
length = numbers_len,
mean = numbers_mean,
median = numbers_median
)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- function(vector1) {
result <- list(
mean = mean(vector1),
median = median(vector1),
length = length(vector1)
)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(seq(1, 100))
# A2 foundational skills
# Set up and Defining variables ------------------------------------------------
# Load the the `stringr` package
# (you'll need to install it if you haven't used it before)
# It has a variety of functions that make working with string variables easier
install.packages("stringr")
library("stringr")
install.packages("lintr")
library("lintr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "Pow"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 60 * 24
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24 * 365
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the
# function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
return(paste("Hello, my name is", name, "and I'm", age, "years old."))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters.
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all lower-case letters.
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized_intro`, which is your `my_intro` variable,
# but with each word capitalized. hint: use the stringr function `str_to_title
capitalized_intro <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
value * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value) {
value * value * value
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- function(inches) {
2.54 * inches
}
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 70
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <- inches_to_cm(inches_tall)
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables, and return the argument which has more occurances of the letter "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(string1, string2) {
lower_str1 <- tolower(string1)
lower_str2 <- tolower(string2)
if ((str_count(lower_str1, "z") == 0) & (str_count(lower_str2, "z") == 0)) {
result <- "Neither string contains the letter z."
} else if (str_count(lower_str1, "z") > str_count(lower_str2, "z")) {
result <- string1
} else if (str_count(lower_str1, "z") < str_count(lower_str2, "z")) {
result <- string2
} else {
result <- "The strings have the same number of Zs."
}
result
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zefez", "zefezZ")
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector1) {
result <- gsub("\\d", "", vector1)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits_test <- remove_digits(c("INFO 201", "CSE 142"))
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Frozen", "Cinderella", "Peter Pan", "Toy Story", "Spiderman",
"Coco")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, " is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
without_four <- movies[-4]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- seq(4, 400, 4)
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_8 <- multiples_of_4[c(FALSE, TRUE)]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700, 999)
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- numbers[numbers < numbers_mean]
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
higher_numbers <- numbers[numbers > numbers_mean]
# Lists ------------------------------------------------------------------------
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list(
length = numbers_len,
mean = numbers_mean,
median = numbers_median
)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- function(vector1) {
result <- list(
mean = mean(vector1),
median = median(vector1),
length = length(vector1)
)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(seq(1, 100))
install.packages("stringr")
install.packages("lintr")
lintr:::addin_lint()
remove_digits <- function(vector1) {
gsub("\\d", "", vector1)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits_test <- remove_digits(c("INFO 201", "CSE 142"))
summarize_vector <- function(vector1) {
result <- list(
mean = mean(vector1),
median = median(vector1),
length = length(vector1)
)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(seq(1, 100))
summarize_vector <- function(vector1) {
list(
mean = mean(vector1),
median = median(vector1),
length = length(vector1)
)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(seq(1, 100))
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
summarize_vector <- function(vector1) {
list(
mean = mean(vector1),
median = median(vector1),
length = length(vector1)
)
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(seq(1, 100))
lintr:::addin_lint()
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
excited <- paste(movies, " is a great movie!")
excited <- paste(movies, "is a great movie!")
excited <- paste(movies, "is a great movie!")
excited <- paste(movies, "i a great movie!")
excited <- paste(movies, "is a great movie!")
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
make_introduction <- function(name, age) {
return(paste("Hello, my name is", name, "and I'm", age, "years old."))
}
my_intro <- make_introduction(my_name, my_age)
make_introduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old.")
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
my_intro <- make_introduction(my_name, my_age)
lintr:::addin_lint()
install.packages("carData")
print(nrow(Florida[,Florida$GORE > Florida$BUSH]))
Florida <- data.frame(carData)
View(carData)
View(df)
install.packages("carData")
library("carData")
print(nrow(Florida[,Florida$GORE > Florida$BUSH]))
nrow(Florida[Florida$GORE > Florida$BUSH,])
Florida[Florida$GORE > Florida$BUSH,]
nrow(Florida[GORE > BUSH,])
nrow(Florida[Florida$GORE > Florida$BUSH,])
rownames(Florida[Florida$Total == max(Florida$Total),])
rownames(Florida[Florida$Total = max(Florida$Total),])
rownames(Florida[Florida$Total == min(Florida$Total),])
rownames(Florida$Total[Florida$Total == max(Florida$Total),])
nrow(Florida[Florida$GORE > Florida$BUSH,])
nrow(Florida$NADER[Florida$GORE > Florida$BUSH,])
Florida[Florida$GORE > Florida$BUSH,]
Florida$NADER[Florida$GORE > Florida$BUSH,]
Florida[Florida$NADER]
Florida[Florida$NADER,]
Florida[Florida$GORE > Florida$BUSH,]
Florida[Florida$GORE > Florida$BUSH,]
Florida[Florida$GORE > Florida$BUSH, "NADER"]
sum(Florida[Florida$GORE > Florida$BUSH, "NADER"])
nrow(Florida[Florida$GORE > Florida$BUSH,])
rownames(Florida[Florida$Total == max(Florida$Total),])
library(pscl)
install.packages("pscl")
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(dplyr)
library(tidyr)
install.packages('tidyr')
library(tidyr)
install.packages("pscl")
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
install.packages("pscl")
View(outcome)
presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
outcome2 <- presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(dplyr)
install.packages('tidyr')
library(tidyr)
install.packages("pscl")
library(pscl)
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
outcome2 <- presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
View(outcome2)
has_most_delays <- flights %>%            # start with the flights
group_by(carrier) %>%                   # group by airline (carrier)
filter(dep_delay > 0) %>%               # find only the delays
summarize(num_delay = n()) %>%          # count the observations
filter(num_delay == max(num_delay)) %>% # find most delayed
select(carrier)
install.packages('nycflights13')
library(nycflights13)
nyc_df <- as.data.frame(flights)
View(nyc_df)
has_most_delays <- flights %>%            # start with the flights
group_by(carrier) %>%                   # group by airline (carrier)
filter(dep_delay > 0) %>%               # find only the delays
summarize(num_delay = n()) %>%          # count the observations
filter(num_delay == max(num_delay)) %>% # find most delayed
select(carrier)
has_most_delays <- flights %>%            # start with the flights
group_by(carrier) %>%                   # group by airline (carrier)
filter(dep_delay > 0) %>%               # find only the delays
summarize(num_delay = n()) %>%          # count the observations
filter(num_delay == max(num_delay)) %>% # find most delayed
select(dest)
install.packages('nycflights13')
library(nycflights13)
nyc_df <- as.data.frame(flights)
View(nyc_df)
has_most_delays <- flights %>%            # start with the flights
group_by(carrier) %>%                   # group by airline (carrier)
filter(dep_delay > 0) %>%               # find only the delays
summarize(num_delay = n()) %>%          # count the observations
filter(num_delay == max(num_delay)) %>% # find most delayed
select(dest)
install.packages("nycflights13")
has_most_delays <- flights %>%            # start with the flights
group_by(dest) %>%                   # group by airline (carrier)
filter(dep_delay > 0) %>%               # find only the delays
summarize(num_delay = n()) %>%          # count the observations
filter(num_delay == max(num_delay)) %>% # find most delayed
select(dest)
most_early <- flights %>%
group_by(dest) %>% # group by destination
summarize(delay = mean(arr_delay, na.rm = TRUE)) %>% # compute mean delay
filter(delay == max(delay, na.rm = TRUE)) %>% # filter for least delayed
select(dest, delay) %>% # select the destination (and delay to store it)
left_join(airports, by = c("dest" = "faa")) %>% # join on `airports` data
select(dest, name, delay) # select output variables of interest
most_late <- flights %>%
group_by(dest) %>% # group by destination
summarize(delay = mean(arr_delay, na.rm = TRUE)) %>% # compute mean delay
filter(delay == max(delay, na.rm = TRUE)) %>% # filter for least delayed
select(dest, delay) %>% # select the destination (and delay to store it)
left_join(airports, by = c("dest" = "faa")) %>% # join on `airports` data
select(dest, name, delay) # select output variables of interest
most_early <- flights %>%
group_by(dest) %>% # group by destination
summarize(delay = mean(arr_delay, na.rm = TRUE)) %>% # compute mean delay
filter(delay == min(delay, na.rm = TRUE)) %>% # filter for least delayed
select(dest, delay) %>% # select the destination (and delay to store it)
left_join(airports, by = c("dest" = "faa")) %>% # join on `airports` data
select(dest, name, delay) # select output variables of interest
View(outcome)
View(outcome2)
library("dplyr")
install.packages("ggmap")
library("ggmap")
library("ggplot2")
permit_data <- read.csv(
"https://raw.githubusercontent.com/programming-for-data-science/in-action/master/interactive-vis/data/Building_Permits.csv",
stringsAsFactors = F)
# Formatting and filtering data
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
# Chart option 2: years as continuous
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
samp <- permit_data %>%
filter(!is.na(Longitude), !is.na(Latitude), Longitude <0, Latitude < 100) %>%
filter(PermitTypeDesc == "New") %>%
mutate(year = as.numeric(substr(IssuedDate, 1, 4))) %>%
filter(year > 2010)
# Chart option 1: years as categories
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = year
) + scale_color_continuous() +
labs(color = "Year")
qmplot(
data = samp,
x = Longitude,
y = Latitude,
color = as.character(year)
) + scale_color_discrete() +
labs(color = "Year")
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
setwd('~/Projects/uw-ischool-info-201a-2019-autumn-Project')
data_2017 <- read.csv('data/2017.csv', stringsAsFactors = FALSE)
View(data_2017)
install.packages('ggplot')
install.packages('ggplot2')
library(ggplot2)
View(data_2017)
View(data_2017)
ggplot(data_2017, aes(x = Family, y = Happiness.Score)) +
geom_point() +
ggtitle("Comparing Effect of Family on Happiness Score")
ggplot(data_2017, aes(x = Freedom, y = Happiness.Score)) +
geom_point() +
ggtitle("Comparing Effect of Family on Happiness Score")
ggplot(data_2017, aes(x = Freedom, y = Happiness.Score)) +
geom_point() +
ggtitle("Comparing Effect of Freedom on Happiness Score")
ggplot(data_2017, aes(x = Freedom, y = Happiness.Score)) +
geom_point() +
geom_line() +
ggtitle("Comparing Effect of Freedom on Happiness Score")
ggplot(data_2017, aes(x = Freedom, y = Happiness.Score)) +
geom_point() +
geom_abline() +
ggtitle("Comparing Effect of Freedom on Happiness Score")
ggplot(data_2017, aes(x = Freedom, y = Happiness.Score)) +
geom_point() +
geom_smooth() +
ggtitle("Comparing Effect of Freedom on Happiness Score")
ggplot(data_2017, aes(x = Freedom, y = Happiness.Score)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Comparing Effect of Freedom on Happiness Score")
ggplot(data_2017, aes(x = Freedom, y = Happiness.Score)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Comparing Effect of Freedom on Happiness Score")
ggplot(data_2017, aes(x = Family, y = Happiness.Score)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Comparing Effect of Family on Happiness Score")
ggplot(data_2017, aes(x = Freedom, y = Happiness.Score)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Comparing Effect of Freedom on Happiness Score")
