"State Reps",
titlePanel("State Reps Info"),
sidebarLayout(
# Sidebar
sidebarPanel(
selectInput("state", "Please Select a State:",
choices = state.abb),
uiOutput('rep_dropdown'),
htmlOutput(outputId = "more_info")
),
# Main
mainPanel(
tableOutput(outputId = "grouped_table")
)
)
)
# Summary plots page, third tab
summary_page <- tabPanel(
"Summary",
titlePanel("Summary Page"),
sidebarLayout(
# Sidebar
sidebarPanel(
selectInput("state_summary", "Please Select a State:",
choices = state.abb),
),
# Main
mainPanel(
h3("Comparing Gender and Party Across States"),
plotOutput(outputId = "gender_plot"),
plotOutput(outputId = "party_plot"),
)
)
)
# Set working directory as appropriate
# setwd("~/Projects/a7--pareepipatkul")
library("shiny")
library("shinythemes")
library("dplyr")
# Shiny UI
ui <- shinyUI(navbarPage(title = "Congressional Member Information",
theme = shinytheme("darkly"),
about_page,
state_rep_page,
summary_page
))
# About page, first tab
about_page <- tabPanel(
"About",
titlePanel("About Page"),
sidebarLayout(
# Sidebar
sidebarPanel(
h4("Name:"),
p(em(strong("Pow Areepipatkul"))),
h4("Affiliation:"),
p(em("INFO-201A: Technical Foundations of Informatics,
The Information School, University of Washington, Autumn 2019"))
),
# Main
mainPanel(
# Overview
h2("Overview"),
p("With this assignment, my goal is to use all the skills I've learned
during my time in INFO-201 to tackle information about congressional
representatives. Using the ProPublica Congress API and data wrangling
in R, I have created an interactive Shiny application that displays
information about each state's representatives as well as two data
visualizations with the representatives grouped by gender and party."),
p("The Congress API, which originated at the New York Times in 2009,
allows retrieval of legislative data from the House of Representatives,
the Senate, and the Library of Congress. In order to obtain the data
from the API, I've written several functions in a script to make
requests and process the data. This also requires a specific API
key, and more information is available at the ProPublica Congress API
page linked below."),
uiOutput("api_link"),
# Reflective Statement
h3("Reflective Statement"),
p("Something I found especially challenging during this assignment was how
to begin tackling the data given by the API. I thought it was tough
because I had no guidelines or instructions to rely on, it was just
me trying my hardest to read the information provided on the API page.
After I got the information down to a data frame, I decided to read
more about what data I was dealing with. Quoting O'Neil from the reading,
he writes: \"I worried about the separation between technical models
and real people, and about the moral repercussions of that separation.\"
After I understood the data and got a general understanding of what
the moral repercussions could be from this data set, I began to tackle
the challenge of writing the function I called: get_rep_age. I knew I had
to somehow keep things simple, so I read through some R documentation and
found a function called: age_calc, which enabled me to use the existing
information on a member's date of birth to get the age in years using
the following line of code."),
p(strong("rep_age <- age_calc(date_of_birth, units = \"years\")")),
p("After overcoming the task of writing this challenging function, I
felt confident with the rest of the tasks and was able to get all the
data I needed from the API to complete the assignment.")
)
)
)
# Info on state reps page, second tab
state_rep_page <- tabPanel(
"State Reps",
titlePanel("State Reps Info"),
sidebarLayout(
# Sidebar
sidebarPanel(
selectInput("state", "Please Select a State:",
choices = state.abb),
uiOutput('rep_dropdown'),
htmlOutput(outputId = "more_info")
),
# Main
mainPanel(
tableOutput(outputId = "grouped_table")
)
)
)
# Summary plots page, third tab
summary_page <- tabPanel(
"Summary",
titlePanel("Summary Page"),
sidebarLayout(
# Sidebar
sidebarPanel(
selectInput("state_summary", "Please Select a State:",
choices = state.abb),
),
# Main
mainPanel(
h3("Comparing Gender and Party Across States"),
plotOutput(outputId = "gender_plot"),
plotOutput(outputId = "party_plot"),
)
)
)
runApp('Projects/a7--pareepipatkul')
runApp('Projects/a7--pareepipatkul')
runApp('Projects/a7--pareepipatkul')
shiny::runApp('Projects/a7--pareepipatkul')
# Set working directory as appropriate
# setwd("~/Projects/a7--pareepipatkul")
library(shiny)
library("dplyr")
source("propublica.R")
server <- shinyServer(
function(session, input, output) {
# Table for State Rep Info
output$grouped_table <- renderTable({
chosen_state <- input$state
state_rep <- get_state_reps_data(state = chosen_state)
state_rep <- state_rep %>%
select(name, party, age, twitter_id, facebook_account)
state_rep_df <- data.frame(query = state_rep, stringsAsFactors = FALSE)
state_rep_df <- setNames(state_rep_df, c("Name", "Party", "Age", "Twitter", "Facebook"))
state_rep_df
})
# More detailed information on specific state rep
output$more_info <- renderText({
chosen_state <- input$state
state_rep <- get_state_reps_data(state = chosen_state)
state_rep <- state_rep %>%
select(name, id)
state_rep_df <- data.frame(query = state_rep, stringsAsFactors = FALSE)
state_rep_df <- setNames(state_rep_df, c("Name", "ID"))
chosen_rep <- input$rep
filtered_member <- state_rep_df %>%
filter(Name == chosen_rep)
member_data <- get_member_data(filtered_member$ID)
paste("Name: ", filtered_member$Name, "<br>", "Gender: ", member_data[1],
"<br>", member_data[2], "<br>",
member_data[3], "<br>", member_data[4], sep = "")
})
output$rep_dropdown <- renderUI({
chosen_state <- input$state
state_rep <- get_state_reps_data(state = chosen_state)
state_rep <- state_rep %>%
select(name)
state_rep_df <- data.frame(query = state_rep, stringsAsFactors = FALSE)
state_rep_df <- setNames(state_rep_df, c("Name"))
selectInput("rep", "More Info on a Representative:",
choices = state_rep_df$Name)
})
# Gender Plot in Summary Page
output$gender_plot <- renderPlot({
state_summary <- input$state_summary
state_rep <- get_summary_info(state = state_summary)
ggplot(data = state_rep) +
geom_bar(mapping = aes(x = gender, fill = gender)) +
coord_flip() +
scale_fill_manual("gender", values = c("F" = "pink", "M" = "grey")) +
ggtitle("Representatives Count by Gender")
})
# Party Plot in Summary Page
output$party_plot <- renderPlot({
state_summary <- input$state_summary
state_rep <- get_summary_info(state = state_summary)
ggplot(data = state_rep) +
geom_bar(mapping = aes(x = party, fill = party)) +
coord_flip() +
scale_fill_manual("party", values = c("D" = "blue", "R" = "red")) +
ggtitle("Representatives Count by Party")
})
# URL to API for About Page
api_url <- a("ProPublica Congress API",
href="https://projects.propublica.org/api-docs/congress-api/")
output$api_link <- renderUI({
tagList("Link to Congress API:", api_url)
})
}
)
# Set working directory as appropriate
# setwd("~/Projects/a7--pareepipatkul")
library("shiny")
library("shinythemes")
library("dplyr")
# Shiny UI
ui <- shinyUI(navbarPage(title = "Congressional Member Information",
theme = shinytheme("darkly"),
about_page,
state_rep_page,
summary_page
))
# About page, first tab
about_page <- tabPanel(
"About",
titlePanel("About Page"),
sidebarLayout(
# Sidebar
sidebarPanel(
h4("Name:"),
p(em(strong("Pow Areepipatkul"))),
h4("Affiliation:"),
p(em("INFO-201A: Technical Foundations of Informatics,
The Information School, University of Washington, Autumn 2019"))
),
# Main
mainPanel(
# Overview
h2("Overview"),
p("With this assignment, my goal is to use all the skills I've learned
during my time in INFO-201 to tackle information about congressional
representatives. Using the ProPublica Congress API and data wrangling
in R, I have created an interactive Shiny application that displays
information about each state's representatives as well as two data
visualizations with the representatives grouped by gender and party."),
p("The Congress API, which originated at the New York Times in 2009,
allows retrieval of legislative data from the House of Representatives,
the Senate, and the Library of Congress. In order to obtain the data
from the API, I've written several functions in a script to make
requests and process the data. This also requires a specific API
key, and more information is available at the ProPublica Congress API
page linked below."),
uiOutput("api_link"),
# Reflective Statement
h3("Reflective Statement"),
p("Something I found especially challenging during this assignment was how
to begin tackling the data given by the API. I thought it was tough
because I had no guidelines or instructions to rely on, it was just
me trying my hardest to read the information provided on the API page.
After I got the information down to a data frame, I decided to read
more about what data I was dealing with. Quoting O'Neil from the reading,
he writes: \"I worried about the separation between technical models
and real people, and about the moral repercussions of that separation.\"
After I understood the data and got a general understanding of what
the moral repercussions could be from this data set, I began to tackle
the challenge of writing the function I called: get_rep_age. I knew I had
to somehow keep things simple, so I read through some R documentation and
found a function called: age_calc, which enabled me to use the existing
information on a member's date of birth to get the age in years using
the following line of code."),
p(strong("rep_age <- age_calc(date_of_birth, units = \"years\")")),
p("After overcoming the task of writing this challenging function, I
felt confident with the rest of the tasks and was able to get all the
data I needed from the API to complete the assignment.")
)
)
)
# Info on state reps page, second tab
state_rep_page <- tabPanel(
"State Reps",
titlePanel("State Reps Info"),
sidebarLayout(
# Sidebar
sidebarPanel(
selectInput("state", "Please Select a State:",
choices = state.abb),
uiOutput('rep_dropdown'),
htmlOutput(outputId = "more_info")
),
# Main
mainPanel(
tableOutput(outputId = "grouped_table")
)
)
)
# Summary plots page, third tab
summary_page <- tabPanel(
"Summary",
titlePanel("Summary Page"),
sidebarLayout(
# Sidebar
sidebarPanel(
selectInput("state_summary", "Please Select a State:",
choices = state.abb),
),
# Main
mainPanel(
h3("Comparing Gender and Party Across States"),
plotOutput(outputId = "gender_plot"),
plotOutput(outputId = "party_plot"),
)
)
)
runApp('Projects/a7--pareepipatkul')
runApp('Projects/a7--pareepipatkul')
runApp('Projects/a7--pareepipatkul')
runApp('Projects/uw-ischool-info-201a-2019-autumn-Project')
library(ggplot2)
# 2017 Global Happiness data frame we're working with
data_2017 <- read.csv('data/2017.csv', stringsAsFactors = FALSE)
# Renamed column names
data_2017 <- data_2017 %>%
select(Economy..GDP.per.Capita., Family, Health..Life.Expectancy.,
Freedom, Generosity, Trust..Government.Corruption., Happiness.Score) %>%
rename(CapitaGDP = Economy..GDP.per.Capita., LifeExpectancy = Health..Life.Expectancy.,
Government = Trust..Government.Corruption.)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
linear_fit1 <- lm("Happiness.Score" ~ feature_type, data = data_2017)
ggplotRegression(linear_fit1)
library(ggplot2)
# 2017 Global Happiness data frame we're working with
data_2017 <- read.csv('data/2017.csv', stringsAsFactors = FALSE)
# Renamed column names
data_2017 <- data_2017 %>%
select(Economy..GDP.per.Capita., Family, Health..Life.Expectancy.,
Freedom, Generosity, Trust..Government.Corruption., Happiness.Score) %>%
rename(CapitaGDP = Economy..GDP.per.Capita., LifeExpectancy = Health..Life.Expectancy.,
Government = Trust..Government.Corruption.)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
linear_fit1 <- lm("Happiness.Score" ~ feature_type, data = data_2017)
ggplotRegression(linear_fit1)
linear_fit1 <- lm(Happiness.Score ~ feature_type, data = data_2017)
ggplotRegression(linear_fit1)
fit1 <- lm("Happiness.Score" ~ feature_type, data = data_2017)
setwd("~/Projects/uw-ischool-info-201a-2019-autumn-Project")
library(ggplot2)
# 2017 Global Happiness data frame we're working with
data_2017 <- read.csv('data/2017.csv', stringsAsFactors = FALSE)
# Renamed column names
data_2017 <- data_2017 %>%
select(Economy..GDP.per.Capita., Family, Health..Life.Expectancy.,
Freedom, Generosity, Trust..Government.Corruption., Happiness.Score) %>%
rename(CapitaGDP = Economy..GDP.per.Capita., LifeExpectancy = Health..Life.Expectancy.,
Government = Trust..Government.Corruption.)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
fit1 <- lm("Happiness.Score" ~ feature_type, data = data_2017)
ggplotRegression(fit1)
library(ggplot2)
# 2017 Global Happiness data frame we're working with
data_2017 <- read.csv('data/2017.csv', stringsAsFactors = FALSE)
View(data_2017)
data_2017 <- read.csv('data/2017.csv', stringsAsFactors = FALSE)
# Renamed column names
data_2017 <- data_2017 %>%
select(Economy..GDP.per.Capita., Family, Health..Life.Expectancy.,
Freedom, Generosity, Trust..Government.Corruption., Happiness.Score) %>%
rename(CapitaGDP = Economy..GDP.per.Capita., LifeExpectancy = Health..Life.Expectancy.,
Government = Trust..Government.Corruption.)
ggplotRegression <- function (fit) {
require(ggplot2)
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
fit1 <- lm("Happiness.Score" ~ feature_type, data = data_2017)
fit1 <- lm(Happiness.Score ~ feature_type, data = data_2017)
print(Happiness.Score)
fit1 <- lm(data_2017$Happiness.Score ~ data_2017$Family, data = data_2017)
ggplotRegression(fit1)
data_2017 <- read.csv('data/2017.csv', stringsAsFactors = FALSE)
# Renamed column names
data_2017 <- data_2017 %>%
select(Economy..GDP.per.Capita., Family, Health..Life.Expectancy.,
Freedom, Generosity, Trust..Government.Corruption., Happiness.Score) %>%
rename(CapitaGDP = Economy..GDP.per.Capita., LifeExpectancy = Health..Life.Expectancy.,
Government = Trust..Government.Corruption.)
ggplotRegression <- function (fit) {
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
fit1 <- lm(data_2017$Happiness.Score ~ data_2017$Family, data = data_2017)
ggplotRegression(fit1)
library(ggplot2)
# 2017 Global Happiness data frame we're working with
data_2017 <- read.csv('data/2017.csv', stringsAsFactors = FALSE)
# Renamed column names
data_2017 <- data_2017 %>%
select(Economy..GDP.per.Capita., Family, Health..Life.Expectancy.,
Freedom, Generosity, Trust..Government.Corruption., Happiness.Score) %>%
rename(CapitaGDP = Economy..GDP.per.Capita., LifeExpectancy = Health..Life.Expectancy.,
Government = Trust..Government.Corruption.)
ggplotRegression <- function (fit) {
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
fit1 <- lm(data_2017$Happiness.Score ~ data_2017$Government, data = data_2017)
ggplotRegression(fit1)
library(ggplot2)
# 2017 Global Happiness data frame we're working with
data_2017 <- read.csv('data/2017.csv', stringsAsFactors = FALSE)
# Renamed column names
data_2017 <- data_2017 %>%
select(Economy..GDP.per.Capita., Family, Health..Life.Expectancy.,
Freedom, Generosity, Trust..Government.Corruption., Happiness.Score) %>%
rename(CapitaGDP = Economy..GDP.per.Capita., LifeExpectancy = Health..Life.Expectancy.,
Government = Trust..Government.Corruption.)
ggplotRegression <- function (fit) {
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
fit1 <- lm(data_2017$Happiness.Score ~ data_2017$Family, data = data_2017)
ggplotRegression(fit1)
runApp()
library(ggplot2)
# 2017 Global Happiness data frame we're working with
data_2017 <- read.csv('data/2017.csv', stringsAsFactors = FALSE)
# Renamed column names
data_2017 <- data_2017 %>%
select(Economy..GDP.per.Capita., Family, Health..Life.Expectancy.,
Freedom, Generosity, Trust..Government.Corruption., Happiness.Score) %>%
rename(CapitaGDP = Economy..GDP.per.Capita., LifeExpectancy = Health..Life.Expectancy.,
Government = Trust..Government.Corruption.)
ggplotRegression <- function (fit) {
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
runApp()
runApp()
library(ggplot2)
# 2017 Global Happiness data frame we're working with
data_2017 <- read.csv('data/2017.csv', stringsAsFactors = FALSE)
# Renamed column names
data_2017 <- data_2017 %>%
select(Economy..GDP.per.Capita., Family, Health..Life.Expectancy.,
Freedom, Generosity, Trust..Government.Corruption., Happiness.Score) %>%
rename(CapitaGDP = Economy..GDP.per.Capita., LifeExpectancy = Health..Life.Expectancy.,
Government = Trust..Government.Corruption.)
ggplotRegression <- function (fit) {
ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
labs(title = paste("Adj R2 = ",signif(summary(fit)$adj.r.squared, 5),
"Intercept =",signif(fit$coef[[1]],5 ),
" Slope =",signif(fit$coef[[2]], 5),
" P =",signif(summary(fit)$coef[2,4], 5)))
}
runApp()
runApp()
runApp()
